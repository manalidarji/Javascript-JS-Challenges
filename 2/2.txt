Movie object
Selecting transcript lines in this section will navigate to timestamp in the video
(game sound effects) - 

For this JavaScript challenge, we're going back to the basics, the prototype chain. Unlike other programming languages, JavaScript uses objects to construct inheritance. Each object has a private property which links to another object. This object is known as its prototype. This prototype object has a prototype of its own, and this chain continues until an object with a null prototype has been reached. 

Your task is to create a movie object that takes in five arguments: 
Title, director, genre, release year and rating. 

The movie prototype should have a function called get overview, which logs the following overview for each film:
Movie, a genre film directed by director was released in release here. It received a rating of rating.

You can use either class or function syntax to create your prototype. Once you create your movie object, create a few movies to test it out.

 So pause the video here, develop your solution. And when you're ready, come back and I'll walk you through how I solved the challenge. (game sound effects) I'm first going to create the movie object using function syntax. Let's start by declaring the function keyword followed by Movie with a capital M. We capitalize the first letter to indicate that this function must be called using the new keyword. Next let's add our five arguments. Title, director, genre, release year and rating. Lastly, we'll use the this keyword to assign these arguments to the object instance. This is known as a constructor function, and we can think of it like a blueprint for JavaScript objects. Every time I create a new movie, I tell the constructor function, these are the values I want to assign to this instance of the movie object. Now we're ready to add our get overview function on the prototype. To add a function to the prototype, we use the constructor function name followed by the prototype keyword. And lastly, the name of the function we want to add. We declare the function on the prototype so that each new copy or instance of the movie object doesn't recreate the function. If we have seven movies, we don't need seven copies of the function. We just need one that each instance can reference. Finally, I'll use template strings to interpolate the properties into an overview string. Template strings or template literals allow you to combine expressions like a variable value or a process like multiplication with plain strings. The expressions inside the dollar sign and curly brackets is evaluated and combined with the plain strings. To test that our constructor function is working, we can create two new movies. If we console log Spiderman's get overview value and Batman's get overview value, they're using the properties we declared above, even though they're using the same get overview function. If we head over to our browser console, we'll see we have console logged, Spiderman the Movie with all of its properties, as well as our get overview strings for each of the two films. Instead of using the function keyword, we can use the class keyword. This class keyword is simply syntactical sugar, and isn't comparable to object oriented programming languages like Java. I'll comment out our function so we can reference it when creating our class component. To set our properties, we use a constructor function inside of our movie class. This constructor function takes the five arguments and similar to the constructor function syntax in the first solution, we assign the values to the object instance, using the this keyword To add our get overview function to our movie class, we don't need to use the prototype keyword. We can simply include a get overview function inside of the movie class. I'll copy our template literal string from our function just to save a little bit of time. If we head back to the console, we can see that everything is working as expected. While using constructor functions, it's just as valid as using class notation. Class notation encapsulates all of the functionality in one place. So it's a little bit simpler and easier to read. And class notation is becoming more prevalent. So it's really important to have a strong understanding of how it works so that you can ace your technical interviews and improve your JavaScript skills.